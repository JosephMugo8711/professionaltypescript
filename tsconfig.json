{
  "compilerOptions": {
    // Specifies the module system to use for code generation.
    // 'amd' is compatible with RequireJS, which is typically used for client-side module loading.
    "module": "amd",

    // Alternatively, you can use 'commonjs' for Node.js projects or when using CommonJS module format.
    // This allows for the module system to be compatible with the Node.js `require()` function.
    // "module": "commonjs",

    // Specifies the ECMAScript target version for the compiled JavaScript code.
    // 'es5' ensures that the generated JavaScript is compatible with older browsers like Internet Explorer 11.
    // For modern web apps, you might want to use "es6" or higher.
    "target": "es5",

    // Defines the root directory where TypeScript will look for source files.
    // In this case, all TypeScript files are located under the "src" folder.
    "rootDir": "./src",

    // Specifies the output directory for the compiled JavaScript files.
    // All compiled files will be output in the "view" directory.
    "outDir": "./view",

    // This flag generates '.d.ts' declaration files which are useful for defining types in modules.
    // These files can be used by other TypeScript files or JavaScript consumers for type checking.
    "declaration": true,

    // Removes comments from the final compiled JavaScript files, which is often preferred for production builds.
    // This reduces the size of the output files and removes non-essential information.
    "removeComments": true,

    // Allows default imports from non-ESM (ECMAScript Module) modules, 
    // enabling compatibility with older CommonJS-style modules.
    "allowSyntheticDefaultImports": true,

    // The base URL for module resolution. This makes it easier to import files in a way that is consistent 
    // across the project, avoiding the need for relative paths like '../../../'.
    "baseUrl": "./",

    // Enables incremental compilation for faster subsequent builds.
    // When enabled, TypeScript will only recompile files that have changed, speeding up the build process.
    "incremental": true,

    // Path where TypeScript stores the incremental build information for faster builds.
    // This file stores metadata on the compilation process and is used to track changes in the project.
    "tsBuildInfoFile": "./view/tsconfig.tsbuildinfo",

    // Sets the JSX handling. In this case, we use "react" for React projects, which tells TypeScript 
    // to parse JSX syntax and convert it into React.createElement calls in the compiled JavaScript.
    "jsx": "react",

    // Enable source map generation. Source maps map compiled JavaScript back to TypeScript for debugging.
    "sourceMap": true,

    // Ensures that every variable must have an explicit type or be inferred by TypeScript.
    // If the compiler encounters an untyped variable, it will throw an error, reducing runtime errors.
    "noImplicitAny": true
  },
  
  // This section specifies which files to include in the compilation process.
  // All files under the "src" directory (and subdirectories) will be compiled.
  "include": [
    "src/**/*"  // Include all TypeScript files within the "src" directory.
  ],

  // This section specifies which files and directories to exclude from the compilation process.
  // Excluding certain directories or files ensures that unnecessary files are not processed.
  "exclude": [
    "node_modules",  // Exclude external dependencies in the "node_modules" folder to avoid compilation overhead.
    "test",           // Exclude the test directory if it's not part of the main project code.
    "lib",            // Exclude the "lib" directory, if it contains files unrelated to the main build.
    "**/*spec.ts"     // Exclude files ending with '.spec.ts', typically used for unit tests.
  ]
}


// module.exports = {
//   entry: "./src/index.ts",
//   output: {
//   filename: "./dist/bundle.js",
//   },
//   // Enable sourcemaps for debugging webpack's output.
//   devtool: "source-map",
//   resolve: {
//   // Add '.ts' and '.tsx' as resolvable extensions.
//   extensions: ["", ".webpack.js", ".web.js", ".ts", ".tsx", ".js"]
//   },
//   module: {
//   loaders: [
//   // All files with a '.ts' or '.tsx' extension will be handled by 'ts-loader'.
//   {test: /\.tsx?$/, loader: "ts-loader"}
//   ],
//   preLoaders: [
//   // All output '.js' files will have any sourcemaps re-processed by 'source-map-loader'.
//   {test: /\.js$/, loader: "source-map-loader"}
//   ]
//   },
//   /*****************************
//   * If you want to use react *
//   ****************************/
//   // When importing a module whose path matches one of the following, just
//   // assume a corresponding global variable exists and use that instead.
//   // This is important because it allows us to avoid bundling all of our
//   // dependencies, which allows browsers to cache those libraries between builds.
//   // externals: {
//   //
//   "react": "React",
//   //
//   "react-dom": "ReactDOM"
//   // },
//   };